using System;
using Xunit;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Routing;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Routing;
using Microsoft.EntityFrameworkCore;
using RazorPagesIgnis.Pages;
using RazorPagesIgnis.Data;
namespace RazorPagesIgnis.Test
{
    public class IndexPageTests
    {
        [Fact]
        public async Task OnGetAsync_PopulatesThePageModel_WithAListOfMessages()
        {
            // Arrange
            var optionsBuilder = new DbContextOptionsBuilder<AppDbContext>()
                .UseSqlite("InMemoryDb");
            #region snippet1
            var mockAppDbContext = new Mock<AppDbContext>(optionsBuilder.Options);
            var expectedMessages = AppDbContext.GetSeedingMessages();
            mockAppDbContext.Setup(
                db => db.GetMessagesAsync()).Returns(Task.FromResult(expectedMessages));
            var pageModel = new IndexModel(mockAppDbContext.Object);
            #endregion

            #region snippet2
            // Act
            await pageModel.OnGetAsync();
            #endregion

            #region snippet3
            // Assert
            var actualMessages = Assert.IsAssignableFrom<List<Message>>(pageModel.Messages);
            Assert.Equal(
                expectedMessages.OrderBy(m => m.Id).Select(m => m.Text), 
                actualMessages.OrderBy(m => m.Id).Select(m => m.Text));
            #endregion
        }
    }

}
